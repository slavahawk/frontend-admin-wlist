name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.20
        options: --privileged
        ports:
          - 5173:80  # Expose the port for Nginx service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and run Docker Compose
        run: |
          set -e  # Stop execution on error
          docker-compose -f docker-compose.yml up --build --abort-on-container-exit

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Wait for the build job to complete successfully

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Print Server Info
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          echo "SERVER_IP: $SERVER_IP"
          echo "USERNAME: $USERNAME"

      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          set -e  # Stop execution on error
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          ssh -v -o StrictHostKeyChecking=no $USERNAME@$SERVER_IP "echo 'SSH Connection Successful'"
          scp -v -o StrictHostKeyChecking=no -r ./path/to/your/build $USERNAME@$SERVER_IP:/path/on/server
          ssh -v -o StrictHostKeyChecking=no $USERNAME@$SERVER_IP << 'EOF'
            cd /path/on/server
            docker-compose down --remove-orphans
            docker-compose up -d --build --remove-orphans
          EOF
